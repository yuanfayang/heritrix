Any module that gets added in the CVS should have the 
following directories. And generally it is not recommended
that we create new modules often. It is better to have all
dependent third party classes or any related files to be
within the ArchiveOpenCrawler module itself. It makes it
more manageable.


   bin
   build
   docs
   lib
   src
   conf (optional)
   testSrc (optional)
   thirdPartyChanges

   1. bin directory - to contain only the launcher 
      related files. (for example bat/sh files)

   2. build directory - to contain the build related files.
      (for example Ant build script configuration files)
      These build files are bundled with the       
      final tar package so that developers can 
      use them to make a build in the local machine 
      provided Ant tool is installed.

   3. docs directory - to contain all the design documents 
      or other ReadMe's of the project.

   4. lib directory - to contain the third party related 
      packages. Inside lib directory there are two directories
      named packages and binaries. The packages directory should
      contain the complete downloaded package tar.gz or so. This
      is maintained so that upgrades to later versions can be
      tracked. The binaries directory should contain the 
      minimal compiled version of third party sources and 
      the compilation is to be done manually by the user. This
      compiled classes will be used in the classpath of the crawler.

   5. src directory - to contain the source files. 

   6. conf (is an optional directory) - to contain all the configuration 
      files used by the project. (For example download.cfg)
      

   7. testSrc directory - to contain all the JUnit test sources with 
      the same package as the source files. All the test source
      file names should start with the word Test. For example
  
      src/org/archive/anecdote/CrawlURI.java should have a test source as
      testSrc/org/archive/anecdote/TestCrawlURI.java.

   8. thirdPartyChanges - to contain the modified sources of the 
      thirdparty packages. Fixes/upgrades done on third party packages 
      should be checked in here.



A. Steps to follow to add a new thirdparty package/new version of the thirdparty package.

   1. Checkin the downloaded package as such in the 
      lib/packages directory.
   2. Manually compile the source files of the package and jar them 
      with a relevent name and checkin that jar into the lib/binaries directory. 
   3. Add the jar file in the build.classpath attribute if not present 
      in the build/build.properties file. Checkin the same into CVS.
   4. Replace the build.properties file in the /home/users/w/wc/wcr-team/BuildSetup 
      directory (where nightly build setup is present) in the 
      shell.sourceforge.net machine with the modified one. As of now, 
      this has to be done manually only.



B. Steps to follow in maintaining the third party overridden files.

   1. Create a directory with the name relevent to the thirdparty package 
      under thirdPartyChanges directory. (For example seda under thirdPartyChanges)
   2. Create a directory called src under the thirdParty package. (For example seda/src)
   3. Checkin the modified source files into that directory. These files will be 
      compiled and prefixed in the classpath of the crawler automatically.
   
   