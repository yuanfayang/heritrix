<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article>
  <title>Heritrix developer documentation</title>

  <articleinfo>
    <date>$Date$</date>

    <editor>
      <firstname>John Erik</firstname>

      <surname>Halse</surname>
    </editor>
  </articleinfo>

  <sect1>
    <title>Introduction</title>

    <para>This manual is intended to be a starting point for users and
    contributors who wants to learn about the internals of the Heritrix web
    crawler and possibly write additions or contribute to the core of the
    software. The <ulink
    url="http://crawler.archive.org/apidocs/index.html">javadoc API
    documentation</ulink> is supposed to be the main developer documentation,
    but this document should help you get started and guide you to the
    interesting parts of the Javadoc documentation.</para>
  </sect1>

  <sect1>
    <title>Obtaining and building Heritrix</title>

    <para></para>

    <sect2>
      <title>Obtaining Heritrix</title>

      <para>Heritrix can be obtained as packaged binary or source downloaded
      from the crawler <ulink
      url="http://sourceforge.net/projects/archive-crawler">sourceforge home
      page</ulink>, or via CVS checkout from cvs.sourceforge.net. See the
      crawler <ulink
      url="http://sourceforge.net/cvs/?group_id=73833">sourceforge cvs
      page</ulink> for how to fetch from CVS (Note, anonymous access does not
      give you the current HEAD but a snapshot that can some times be up to 24
      hours behind HEAD). The packaged binary is named heritrix-?.?.?.tar.gz
      (or heritrix-?.?.?.zip) and the packaged source is named
      heritrix-?.?.?-src.tar.gz (or heritrix-?.?.?-src.zip) where ?.?.? is the
      heritrix release version.</para>
    </sect2>

    <sect2>
      <title>Building Heritrix</title>

      <para>You can build Heritrix from source using Maven. The Heritrix build
      uses maven 1.0-rc1. See <ulink
      url="http://maven.apache.org">maven.apache.org</ulink> for how to obtain
      the binary and setup of your maven environment.</para>

      <para>To build a CVS source checkout with Maven:<programlisting>% cd CVS_CHECKOUT_DIR 
% $MAVEN_HOME/bin/maven dist</programlisting>In the target/distribution
      subdir, you will find packaged source and binary builds. Run
      $MAVEN_HOME/bin/maven -g for other Maven possibilities.</para>
    </sect2>

    <sect2>
      <title>Running Heritrix</title>

      <para>See the User Manual <xref linkend="heritrix_user_manual" /> for
      how to run the built Heritrix.</para>
    </sect2>

    <sect2>
      <title>Eclipse</title>

      <para>The development team uses Eclipse as the development environment.
      This is of course optional, but for those who want to use Eclipse you
      can, at the head of the CVS tree, find Eclipse
      <emphasis>.project</emphasis> and <emphasis>.classpath</emphasis>
      configuration files that should make integrating the CVS checkout into
      your Eclipse development environment straight-forward.</para>
    </sect2>

    <sect2>
      <title>Integration self test</title>

      <para>Run the integration self test on the command line by doing the
      following:<programlisting>% $HERITRIX_HOME/bin/heritrix --selftest</programlisting>This
      will set the crawler going against itself, in particular, the selftest
      webapp. When done, it runs an analsys of the produced arc files and logs
      and dumps a ruling into <filename>heritrix_out.log</filename>. See the
      <ulink
      url="http://crawler.archive.org/apidocs/org/archive/crawler/selftest/package-summary.html">org.archive.crawler.selftest</ulink>
      package for more on how the selftest works. </para>
    </sect2>

    <sect2>
      <title>cruisecontrol</title>

      <para>See <ulink
      url="http://cvs.sourceforge.net/viewcvs.py/archive-crawler/ArchiveOpenCrawler/src/cc">src/cc</ulink>
      for a <filename>config.xml</filename> that will run the heritrix maven
      build under <ulink
      url="http://cruisecontrol.sourceforge.net/">cruisecontrol</ulink>. See
      the <filename>README.txt</filename> in the same directory for how to set
      up continuous building using cc.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Coding conventions</title>

    <para>Heritrix baselines on SUN's Code Conventions for the Java™
    Programming Language <xref linkend="sun_code_conventions" />. It'd be hard
    not to they say so little. They at least say <ulink
    url="http://java.sun.com/docs/codeconv/html/CodeConventions.doc3.html#313">maximum
    line length of 80 characters</ulink>.</para>

    <para>We also will favor much of what is written in the document, Java
    Programming Style Guidelines <xref
    linkend="programming_style_guidelines" />.</para>

    <sect2>
      <title>Tightenings on the SUN conventions</title>

      <para>Below are tightenings on the SUN conventions used in
      Heritrix.</para>

      <sect3>
        <title>No Tabs</title>

        <para>No tabs in source code. Set your editor to indent with
        spaces.</para>
      </sect3>

      <sect3>
        <title>Indent Width</title>

        <para>Indents are 4 characters wide.</para>
      </sect3>

      <sect3>
        <title>Function/Block Bracket Open on Same Line</title>

        <para>Preference is to have the bracket that opens functions and
        blocks on same line as function declaration or block test rather than
        on a new line on of its own some. For example:<programlisting>if (true) {
    return true;
}</programlisting>and<programlisting>public void main (String [] args) {
    System.println("Hello world");
}</programlisting></para>
      </sect3>

      <sect3>
        <title>File comment</title>

        <para>Here is the eclipse template we use for the file header
        comment:<programlisting>/* ${type_name}
 * 
 * $$Id$$
 * 
 * Created on ${date}
 *
 * Copyright (C) ${year} Internet Archive.
 * 
 * This file is part of the Heritrix web crawler (crawler.archive.org).
 * 
 * Heritrix is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * any later version.
 * 
 * Heritrix is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser Public License
 * along with Heritrix; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
${package_declaration}</programlisting></para>
      </sect3>
    </sect2>

    <sect2>
      <title>Unit tests code in same package</title>

      <para>"[A ] popular convention is to place all test classes in a
      parallel directory structure. This allows you to use the same Java
      package names for your tests, while keeping the source files separate.
      To be honest, we do not like this approach because you must look in two
      different directories to find files." from <emphasis>Section 4.11.3,
      Java Extreme Programming Cookbook, By Eric M. Burke, Brian M.
      Coyner</emphasis>. We agree with the above so we put Unit Test classes
      beside the classes they are testing in the source tree giving them the
      name of the Class they are testing with a Test suffix.</para>

      <para>Another advantage is that test classes of the same package can get
      at testee's default access methods and members, something a test in
      another package would not be able to do.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Overview of the crawler</title>

    <para>The Heritrix Web Crawler is designed to be modular. Which modules to
    use can be set at runtime from the user interface. Our hope is that if you
    want the crawler to behave different from the default, it should only be a
    matter of writing a new module as a replacement or in addition to the
    modules shipped with the crawler.</para>

    <para>The rest of this document assumes you have a basic understanding of
    how to run a crawl (see: <xref linkend="heritrix_user_manual" />). Since
    the crawler is written in the Java™ programming language, you also need a
    fairly good understanding of Java.</para>

    <para>The crawler consists of <emphasis>core classes</emphasis> and
    <emphasis>pluggable modules</emphasis>. The core classes can be
    configured, but not replaced. The pluggable classes can be substituted by
    altering the configuration of the crawler. A set of basic pluggable
    classes are shipped with the crawler, but if you have needs not met by
    these classes you could write your own.</para>

    <figure pgwide="0">
      <title>Crawler overview</title>

      <mediaobject>
        <imageobject>
          <imagedata contentwidth="622" fileref="crawler_overview1.png"
                     scalefit="0" />
        </imageobject>
      </mediaobject>
    </figure>

    <sect2>
      <title>The CrawlController</title>

      <para>The CrawlController collects all the classes which cooperate to
      perform a crawl, provides a high-level interface to the running crawl,
      and executes the "master thread" which doles out URIs from the Frontier
      to the ToeThreads. As the "global context" for a crawl, subcomponents
      will usually reach each other through the CrawlController.</para>
    </sect2>

    <sect2>
      <title>The Frontier</title>

      <para>The Frontier is responsible for handling out the next URI to be
      crawled. It does so by consulting the CrawlScope to see if the URI is
      within this crawl's scope. It is also responsible for maintaining
      politeness, that is making sure that no web server is crawled to
      heavily. After a URI is crawled, it is handled back to the Frontier
      along with any newly discovered URI's that the Frontier will evaluate
      for crawling.</para>

      <para>The Frontier also keeps the state of the crawl. This includes, but
      is not limited to:</para>

      <itemizedlist>
        <listitem>
          <para>What URIs have been discovered</para>
        </listitem>

        <listitem>
          <para>What URIs are being processed (fetched)</para>
        </listitem>

        <listitem>
          <para>What URIs have been processed</para>
        </listitem>

        <listitem>
          <para>In what order unprocessed URIs will be processed</para>
        </listitem>
      </itemizedlist>

      <para>The Frontier implements the URIFrontier interface and can be
      replaced by any Frontier that implements this interface. It should be
      noted though that writing a Frontier is not a trivial task.</para>
    </sect2>

    <sect2>
      <title>ToeThreads</title>

      <para>The Heritrix web crawler is multi threaded. Every URI is handled
      by its own thread called ToeThreads. A ToeThread asks the Frontier for a
      new URI, sends it trough all the processors and the asks for a new
      URI.</para>
    </sect2>

    <sect2>
      <title>Processors</title>

      <para>Processors are grouped into processor chains (<xref
      linkend="processor_chains" />). Each chain does some processing on a
      URI. When a Processor is finished with a URI the ToeThread sends the URI
      to the next Processor until the URI has been processed by all the
      Processors.</para>

      <figure id="processor_chains">
        <title>Processor chains</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="processing_steps.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The task performed by the different processing chains are as
      follows:</para>

      <para></para>
    </sect2>
  </sect1>

  <sect1>
    <title>Settings</title>

    <para>The settings framework is designed to be a flexible way to configure
    a crawl with special treatment for subparts of the web without adding to
    much performance overhead. If you want to write a module which should be
    configurable through the user interface, it is important to have a basic
    understanding of the Settings framework. At the core the settings
    framework is a way to keep persistent, context sensitive configuration
    settings for any class in the crawler.</para>

    <para>All classes in the crawler that has configurable settings subclasses
    <ulink
    url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ComplexType.html">ComplexType</ulink>
    or one of its descendants. The ComplexType implements the
    javax.management.DynamicMBean interface. This gives you a way to ask the
    object for what attributes it supports and standard methods for getting
    and setting these attributes.</para>

    <para>The entry point into the settings framework is the <ulink
    url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/SettingsHandler.html">SettingsHandler</ulink>.
    This class is responsible for loading and saving from persistent storage
    and for interconnecting the different parts of the framework.</para>

    <figure id="settings_overview">
      <title>Schematic view of the Settings Framework</title>

      <mediaobject>
        <imageobject>
          <imagedata fileref="settings1.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <sect2>
      <title>Settings hierarchy</title>

      <para>The settings framework supports a hierarchy of settings. This
      hierarchy is built by <ulink
      url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/CrawlerSettings.html">CrawlerSettings</ulink>
      objects. On the top there is a settings object representing the global
      settings. This consist of all the settings that a crawl job needs for
      running. Beneath this global object there is one "per" settings object
      for each host/domain which has settings that should override the order
      for that particular host or domain.</para>

      <para>When the settings framework is asked for an attribute for a
      specific host, it will first try to see if this attribute is set for
      this particular host. If it is, the value will be returned. If not, it
      will go up one level recursively until it eventually reach the order
      object and returns the global value. If no value is set here either
      (normally it would be), a hard coded default value is returned.</para>

      <para>All per domain/host settings objects does only contain those
      settings which are to be overridden for this particular domain/host. The
      convention is to name the top level object "global settings" and the
      objects beneath "per settings".</para>

      <para>To further complicate the picture, there is also settings objects
      called refinements. An object of this type belongs to a global or per
      settings object and overrides the settings in it's owners object if some
      criteria is met. These criteria could be that the URI in question
      conforms to a regular expression or that it the settings are consulted
      at a specific time of day limited by a time span.</para>
    </sect2>

    <sect2>
      <title>ComplexType hierarchy</title>

      <para>All the configurable modules in the crawler subclasses ComplexType
      or one of its descendants. The ComplexType is responsible for keeping
      the definition of the configurable attributes of the module. The actual
      values are stored in an instance of DataContainer. The DataContainer is
      never accessed directly from user code. Instead the user accesses the
      attributes through methods in the ComplexType. The attributes are
      accessed in different ways depending if it is from the user interface or
      from inside a running crawl.</para>

      <para>When an attribute is accessed from the URI (either reading or
      writing) you want to make sure that you are editing the attribute in the
      right context. When trying to override an attribute, you don't want the
      settings framework to traverse up to effective value for the attribute,
      but instead want to know that the attribute is not set on this level. To
      achieve this, there is <ulink
      url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ComplexType.html#getLocalAttribute(org.archive.crawler.settings.CrawlerSettings,%20java.lang.String)">getLocalAttribute(CrawlerSettings
      settings, String name)</ulink> and <ulink
      url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ComplexType.html#setAttribute(org.archive.crawler.settings.CrawlerSettings,%20javax.management.Attribute)">setAttribute(CrawlerSettings
      settings, Attribute attribute)</ulink> methods taking a settings object
      as a parameter. These methods works only on the supplied settings
      object. In addition the methods <ulink
      url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ComplexType.html#getAttribute(java.lang.String)">getAttribute(name)</ulink>
      and <ulink
      url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ComplexType.html#setAttribute(javax.management.Attribute)">setAttribute(Attribute
      attribute)</ulink> is there for conformance to the Java JMX
      specification. The latter to always works on the global settings
      object.</para>

      <para>Getting an attribute within a crawl is different in that way that
      you always want to get a value even if it is not set in it's context.
      That means that the settings framework should work its way up the
      settings hierarchy to find the value in effect for the context. The
      method <ulink
      url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ComplexType.html#getAttribute(java.lang.String,%20org.archive.crawler.datamodel.CrawlURI)">getAttribute(String
      name, CrawlURI uri)</ulink> should be used to make sure that the right
      context is used. The <xref linkend="get_attribute_flow" /> shows how the
      settings framework finds the effective value given a context.</para>

      <figure id="get_attribute_flow">
        <title>Flow of getting an attribute</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="settings2.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The different attributes has a type. The allowed type all
      subclasses the <ulink
      url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/Type.html">Type</ulink>
      class. There are tree main Types:</para>

      <orderedlist>
        <listitem>
          <para>SimpleType</para>
        </listitem>

        <listitem>
          <para>ListType</para>
        </listitem>

        <listitem>
          <para>ComplexType</para>
        </listitem>
      </orderedlist>

      <para>Except for the SimpleType, the actual type used will be a subclass
      of one of thes main types.</para>

      <sect3>
        <title>SimpleType</title>

        <para>The <ulink
        url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/SimpleType.html">SimpleType</ulink>
        is mainly for representing Java™ wrappers for the Java™ primitive
        types. In addition it also handles the java.util.Date type and a
        special Heritrix <ulink
        url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/TextField.html">TextField</ulink>
        type. Overrides of a SimpleType must be of the same type as the
        initial default value for the SimpleType.</para>
      </sect3>

      <sect3>
        <title>ListType</title>

        <para>The <ulink
        url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ListType.html">ListType</ulink>
        is further subclassed into versions for some of the wrapped Java™
        primitive types (<ulink
        url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/DoubleList.html">DoubleList</ulink>,
        <ulink
        url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/FloatList.html">FloatList</ulink>,
        <ulink
        url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/IntegerList.html">IntegerList</ulink>,
        <ulink
        url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/LongList.html">LongList</ulink>,
        <ulink
        url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/StringList.html">StringList</ulink>).
        A List holds values in the same order as they was added. If an
        attribute of type ListType is overridden, then the complete list of
        values is replaced at the override level.</para>
      </sect3>

      <sect3>
        <title>ComplexType</title>

        <para>The <ulink
        url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ComplexType.html">ComplexType</ulink>
        is a map of name/value pairs. The values can be any Type including new
        ComplexTypes. The ComplexType is defined abstract and you should use
        one of the subclasses <ulink
        url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/MapType.html">MapType</ulink>
        or <ulink
        url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ModuleType.html">ModuleType</ulink>.
        The MapType allows adding of new name/value pairs at runtime, while
        the ModuleType only allows the name/value pairs that it defines at
        construction time. When overriding the MapType the options are either
        override the value of an already existing attribute or add a new one.
        It is not possible in an override to remove an existing attribute. The
        ModuleType doesn't allow additions in overrides, but the predefined
        attributes' values might be overridden. Since the ModuleType is
        defined at construction time, it is possible to set more restrictions
        on each attribute than in the MapType. An other consequence of
        definition at construction time is that you would normally subclass
        the ModuleType, while the MapType is usable as it is. It is possible
        to restrict the MapType to only allow attributes of a certain type.
        There is also a restriction that MapTypes can not contain nested
        MapTypes.</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1>
    <title>Common needs for all configurable modules</title>

    <para>As mentioned earlier all configurable modules in Heritrix subclasses
    ComplexType (or one of its descendants). When you write your own module
    you should inherit from <ulink
    url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ModuleType.html">ModuleType</ulink>
    which is a subclass of ComplexType intended for be subclassed by all
    modules in Heritrix.</para>

    <sect2>
      <title>Definition of a module</title>

      <para>Heritrix knows how to handle a ComplexType and to get the needed
      information to render the user interface part for it. To make this
      happen your module has to obey some rules.</para>

      <orderedlist>
        <listitem>
          <para>A module should always implement a constructor taking exactly
          one argument - the name argument (<ulink
          url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ModuleType.html#ModuleType(java.lang.String)">see
          ModuleType(String name)</ulink>).</para>
        </listitem>

        <listitem>
          <para>All attributes you want to be configurable should be defined
          in the constructor of the module.</para>
        </listitem>
      </orderedlist>

      <sect3>
        <title>The obligatory one argument constructor</title>

        <para>All modules needs to have a constructor taking a String
        argument. This string is used to identify the module. In the case
        where a module is of a type that is replacing an existing module of
        which there could only be one, it is important that the same name is
        used. In this case the constructor might choose to ignore the name
        string and substitute it with a hardcoded one. This is for example the
        case with the Frontier. The name of the Frontier should always be the
        string "frontier". For this reason the URIFrontier interface that all
        Frontiers should implement has a static variable:<programlisting>public static final String ATTR_NAME = "frontier";</programlisting>which
        implementations of the Frontier use instead of the string argument
        submitted to the constructor. Here is the part of the default
        Frontiers constructor that shows how this should be
        done.<programlisting>public Frontier(String name) {
    //The 'name' of all frontiers should be the same (URIFrontier.ATTR_NAME)
    //therefore we'll ignore the supplied parameter. 
    super(URIFrontier.ATTR_NAME, "Frontier. \nMaintains the internal" +
        " state of the crawl. It dictates the order in which URIs" +
        " will be scheduled. \nThis frontier is mostly a breadth-first" +
        " frontier, which refrains from emitting more than one" +
        " CrawlURI of the same \'key\' (host) at once, and respects" +
        " minimum-delay and delay-factor specifications for" +
        " politeness.");</programlisting>As shown in this example, the
        constructor must call the superclass's constructor. This example also
        shows how to set the description of a module. The description is used
        by the user interface to guide the user in configuring the crawl. If
        you don't want to set a description (strongly discouraged), the
        ModuleType also have a one argument constructor taking just the
        name.</para>
      </sect3>

      <sect3>
        <title>Defining attributes</title>

        <para>The attributes on a module you want to be configurable must be
        defined in the modules constructor. For this purpose the ComplexType
        has a method <ulink
        url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ComplexType.html#addElementToDefinition(org.archive.crawler.settings.Type)">addElementToDefinition(Type
        type)</ulink>. The argument given to this method is a definition of
        the attribute. The <ulink
        url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/Type.html">Type</ulink>
        class is the superclass of all the attribute definitions allowed for a
        ModuleType. Since the ComplexType, which ModuleType inherits, is
        itself a subclass of Type, you can add new ModuleTypes as attributes
        to your module. The Type class implements configuration methods common
        for all Types that defines an attribute on your module. The
        addElementToDefinition method returns the added Type so that it is
        easy to refine the configuration of the Type. Lets look at an example
        (also from the default Frontier) of an attribute
        definiton.<programlisting linenumbering="numbered">public final static String ATTR_MAX_OVERALL_BANDWIDTH_USAGE = "total-bandwidth-usage-KB-sec";
private final static Integer DEFAULT_MAX_OVERALL_BANDWIDTH_USAGE = new Integer(0);
...

Type t;
t = addElementToDefinition(
    new SimpleType(ATTR_MAX_OVERALL_BANDWIDTH_USAGE,
    "The maximum average bandwidth the crawler is allowed to use. \n" +
    "The actual readspeed is not affected by this setting, it only " +
    "holds back new URIs from being processed when the bandwidth " +
    "usage has been to high.\n0 means no bandwidth limitation.",
    DEFAULT_MAX_OVERALL_BANDWIDTH_USAGE));
t.setOverrideable(false);</programlisting>Here we add an attribute definition
        of the SimpleType (which is a subclass of Type). The SimpleType's
        constructor takes three arguments: name, description and a default
        value. Usually the name and default value are defined as constants
        like here, but this is of course optional. The line
        <command>t.setOverrideable(false);</command> informs the settings
        framework to not allow per overrides on this attribute. For a full
        list of methods for configuring a Type see the <ulink
        url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/Type.html">Type</ulink>
        class.</para>
      </sect3>
    </sect2>

    <sect2>
      <title>Accessing attributes</title>

      <para>In most cases when the module needs to access its own attributes,
      a CrawlURI is available. The right way to make sure that all the
      overrides and refinements is considered is then to use the method <ulink
      url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ComplexType.html#getAttribute(java.lang.String,%20org.archive.crawler.datamodel.CrawlURI)">getAttribute(String
      name, CrawlURI uri)</ulink> to get the attribute. Sometimes the context
      you are working in could be defined by other objects than the CrawlURI,
      then use the <ulink
      url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ComplexType.html#getAttribute(java.lang.Object,%20java.lang.String)">getAttribute(Object
      context, String name)</ulink> method to get the value. This method tries
      its best at getting some useful context information out of an object.
      What it does is checking if the context is any kind of URI or a settings
      object. If it can't find anything useful, the global settings are used
      as the context. If you don't have any context at all, which is the case
      in some initialization code, the <ulink
      url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/ComplexType.html#getAttribute(java.lang.String)">getAttribute(String
      name)</ulink> could be used.</para>
    </sect2>

    <sect2>
      <title>Putting together a simple module</title>

      <para>From what we learned so far, let's put together a module that
      doesn't do anything useful, but show some of the concepts.</para>

      <programlisting>package myModule;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.management.AttributeNotFoundException;
import org.archive.crawler.settings.MapType;
import org.archive.crawler.settings.ModuleType;
import org.archive.crawler.settings.RegularExpressionConstraint;
import org.archive.crawler.settings.SimpleType;
import org.archive.crawler.settings.Type;

public class Foo extends ModuleType {
  private static Logger logger = Logger.getLogger("myModule.Foo"); <co
          id="simpleEx_logger" />

  public Foo(String name) {
    Type mySimpleType1 = new SimpleType("name1", "Description1", new Integer(10)); <co
          id="simpleEx_addSimpleType" />
    addElementToDefinition(mySimpleType1);

    Type mySimpleType2 = new SimpleType("name2", "Description2", "defaultValue");
    addElementToDefinition(mySimpleType2);
    mySimpleType2.addConstraint(new RegularExpressionConstraint(".*Val.*", Level.WARNING, <co
          id="simpleEx_addConstraint" />
                "This field must contain 'Val' as part of the string."));

    Type myMapType = new MapType("name3", "Description3", String.class); <co
          id="simpleEx_addMap" />
    addElementToDefinition(myMapType);
  }

  public void getMyTypeValue(CrawlURI curi) {
    try {
      int maxBandwidthKB = ((Integer) getAttribute("name1", curi)).intValue(); <co
          id="simpleEx_getAttribute" />
    } catch (AttributeNotFoundException e) {
      logger.warning(e.getMessage());
    }
  }

  public void playWithMap(CrawlURI curi) {
    try {
      MapType myMapType = (MapType) getAttribute("name3", curi);
      myMapType.addElement(null, new SimpleType("name", "Description", "defaultValue")); <co
          id="simpleEx_addElement" />
      myMapType.setAttribute(new Atrribute("name", "newValue")); <co
          id="simpleEx_setAttribute" />
    } catch (Exception e) {
      logger.warning(e.getMessage());
    }
  }
}</programlisting>

      <para>This example shows several things:<calloutlist>
          <callout arearefs="simpleEx_logger">
            <para>One thing that we have not mentioned before is how we do
            general error logging. Heritrix uses the standard Java 1.4 logging
            facility. The convention is to initialize it with the
            classname.</para>
          </callout>

          <callout arearefs="simpleEx_addSimpleType">
            <para>Here we define and add a SimpleType that takes an Integer as
            the argument and setting it to '10' as the default value.</para>
          </callout>

          <callout arearefs="simpleEx_addConstraint">
            <para>It is possible to add constraints on fields. In addition to
            be constrained to only take strings, this field add a requirement
            that the string should contain 'Val' as part of the string. The
            constraint also has a level and a description. The description is
            used by the user interface to give the user a fairly good
            explanation if the submitted value doesn't fit in with the
            constraint. Three levels are honored. Level.INFO</para>

            <variablelist>
              <varlistentry>
                <term>Level.INFO</term>

                <listitem>
                  <para>Values are accepted even if they don't fullfill the
                  constraint's requirement. This is used when you don't want
                  to disallow the value, but warn the user that the value
                  seems to be out of reasonable bounds.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Level.WARNING</term>

                <listitem>
                  <para>The value must be accepted by the constraint to be
                  valid in crawl jobs, but is legal in profiles even if it
                  don't. This is used to be able to put values into a profile
                  that a user should change for every crawl job derived from
                  the profile.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Level.SEVERE</term>

                <listitem>
                  <para>The value is not allowed whatsoever if it isn't
                  accepted by the constraint.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <para>See the <ulink
            url="http://crawler.archive.org/apidocs/org/archive/crawler/settings/Constraint.html">Constraint</ulink>
            class for more information.</para>
          </callout>

          <callout arearefs="simpleEx_addMap">
            <para>This line defines a MapType allowing only Strings as
            values.</para>
          </callout>

          <callout arearefs="simpleEx_getAttribute">
            <para>An example of how to read an attribute.</para>
          </callout>

          <callout arearefs="simpleEx_addElement">
            <para>Here we add a new element to the MapType. This element is
            valid for this map because its default value is a String.</para>
          </callout>

          <callout arearefs="simpleEx_setAttribute">
            <para>Now we change the value of the newly added attribute. JMX
            requires that the new value is wrapped in an object of type
            Attribute which holds both the name and the new value.</para>
          </callout>
        </calloutlist></para>

      <para>If everything seems ok so far, then we are almost ready to write
      some real modules.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Some notes on the URI classes</title>

    <para></para>

    <sect2>
      <title>The CandidateURI's Attribute list</title>

      <para></para>
    </sect2>

    <sect2>
      <title>The content stream</title>

      <para></para>
    </sect2>
  </sect1>

  <sect1>
    <title>Writing a Frontier</title>

    <para></para>
  </sect1>

  <sect1>
    <title>Writing a Scope</title>

    <para>A <ulink
    url="http://crawler.archive.org/apidocs/org/archive/crawler/framework/CrawlScope.html">CrawlScope</ulink><footnote
        id="footnote_scope_problems">
        <para>It has been identified problems with how the Scopes are defined.
        Please see the user manual for a discussion of the <ulink
        url="http://crawler.archive.org/articles/user_manual.html#scopeproblems">problems
        with the current Scopes</ulink>. The propsed changes to the Scope will
        affect the Filters as well.</para>
      </footnote> instance defines which URIs are "in" a particular crawl. It
    is essentially a Filter which determines, looking at the totality of
    information available about a CandidateURI/CrawlURI instance, if that URI
    should be scheduled for crawling. Dynamic information inherent in the
    discovery of the URI, such as the path by which it was discovered, may be
    considered. Dynamic information which requires the consultation of
    external and potentially volatile information, such as current robots.txt
    requests and the history of attempts to crawl the same URI, should NOT be
    considered. Those potentially high-latency decisions should be made at
    another step.</para>

    <para></para>
  </sect1>

  <sect1>
    <title>Writing a Processor</title>

    <para></para>
  </sect1>

  <sect1>
    <title>Writing a Filter</title>

    <para></para>
  </sect1>

  <sect1>
    <title>Writing a Statistics Tracker</title>

    <para></para>
  </sect1>

  <appendix>
    <title>Version and Release Numbering</title>

    <para>Heritrix uses a version numbering scheme modeled after the one used
    for Linux kernels. Versions are 3 numbers:</para>

    <para>[major ] .[minor/mode ] .[patchlevel ]</para>

    <para>The major version number, currently at zero, increments upon
    significant architectural changes or the achievement of important
    milestones in capabilities. The minor/mode version number increments as
    progress is made within a major version, with the added constraint that
    all external releases have an even minor/mode version number, and all
    internal/development versions have an odd minor/mode version
    number.</para>

    <para>The patchlevel number increments for small sets of changes,
    providing the most fine-grain timeline of software evolution. Patchlevels
    increment regularly for internal/development(odd minor level) work, but
    only increment for external releases when an official update to the
    previous release version has been tested and packaged.</para>

    <para>In the CVS HEAD, version numbers are applied as tags of the form
    "heritrix-#_#_#". When a particular development-version is thought
    appropriate to become an external/"st able" release, it is considered a
    "Release Candidate". If testing confirms it is suitable for release, it is
    assigned the next even minor/mode value (and a zero patchlevel), CVS
    version-labelled, and packaged for release. Immediately after release, and
    before additional coding occurs, the CVS HEAD is assigned the next odd
    minor/mode value (and a zero patchlevel) in project/source files.</para>

    <para>If patches are required to a released version, before the next
    release is ready, they are applied to a CVS branch from the release
    version tag, tested, and released as the subsequent patchlevel.</para>

    <para>Keep in mind that each version number is an integer, not merely a
    decimal digit. To use an extreme example: development version 2.99.99
    would be followed by either the 2.99.100 development version patchlevel or
    the 2.100.0 release. (And after such a release, the next development
    version would be 2.101.0.)</para>
  </appendix>

  <appendix>
    <title>Making a Heritrix Release</title>

    <para>Before initiating a release, its assumed that the current HEAD
    version has been run through the integration self test, that all unit
    tests pass, that the (as yet non-existent) test suite has been exercised,
    and that general usage shows HEAD to be release worthy.</para>

    <orderedlist>
      <listitem>
        <para>Send a mail to the list to freeze commits until the all-clear is
        given.</para>
      </listitem>

      <listitem>
        <para>Up the project.xml 'currentVersion' element and the build.xml
        'version' property. Ensure they are the same version number. (See
        Version and Release Numbering on this page for guidance on what
        version number to use)</para>
      </listitem>

      <listitem>
        <para>Update xdocs/changes.xml with bugs and RFEs closed since last
        release.</para>
      </listitem>

      <listitem>
        <para>(TODO: Changelog based off CVS history).</para>
      </listitem>

      <listitem>
        <para>Add news of the new release to the site main home page.</para>
      </listitem>

      <listitem>
        <para>Generate the site. Review all documentation making sure it
        remains applicable. Fix at least the embarrassing. Make issues to have
        all that remains addressed.</para>
      </listitem>

      <listitem>
        <para>Update the README.txt. Do html2txt on maven generated xdocs (I
        did 'cat PAGE.html| w3m -dump -T text/html &gt; PAGE.txt', catted the
        product together and then did vi regex'ing to clean out website
        navigations and extra whitespace).</para>
      </listitem>

      <listitem>
        <para>Commit all changes made above all in the one commit with a log
        message about new release. Commit files with the new version -- the
        build.xml and project.xml -- as well as the README.txt, home page, and
        all changes in documentation including the changelog additions.</para>
      </listitem>

      <listitem>
        <para>Wait on a cruisecontrol successful build of all just committed.
        Download the src and binary latest builds from under the cruisecontrol
        'build artifacts' link.</para>
      </listitem>

      <listitem>
        <para>Build the cruisecontrol produced src distribution
        version.</para>
      </listitem>

      <listitem>
        <para>Run both the binary and src-built product through the
        integration self test suite: % $HERITRIX_HOME/bin/heritrix
        --selftest</para>
      </listitem>

      <listitem>
        <para>Tag the CVS repository: % cvs -q tag heritrix-?_?_?</para>
      </listitem>

      <listitem>
        <para>Update the project.xml 'currentVersion' and build.xml 'version'
        property to both be a version number beyond that of the release
        currently being made (If we're releasing 0.2.0, then increment to
        0.3.0).</para>
      </listitem>

      <listitem>
        <para>Login and upload the maven 'dist' product to sourceforge into
        the admin-&gt;File releases section.</para>
      </listitem>

      <listitem>
        <para>Send announcement to mailinglist -- and give an all-clear that
        commits may resume -- and update our release state on freshmeat site
        (Here is the URL I used creating our freshmeat project:
        http://freshmeat.net/add-project/all-done/43820/46804/ -- 46804 is our
        project ID).</para>
      </listitem>
    </orderedlist>
  </appendix>

  <appendix>
    <title>Settings XML Schema</title>

    <para>The XML Schema that describes the crawler job order file can be
    viewed as xhtml here, <ulink
    url="http://cvs.sourceforge.net/viewcvs.py/archive-crawler/ArchiveOpenCrawler/src/webapps/root/heritrix_settings.html?rev=1">heritrix_settings.html</ulink>.</para>
  </appendix>

  <bibliography>
    <biblioentry id="heritrix_user_manual">
      <abbrev>Heritrix User Guide</abbrev>

      <title><ulink url="http://crawler.archive.org/user.html">Heritrix User
      Guide</ulink></title>

      <publisher>
        <publishername><ulink url="http://www.archive.org">Internet
        Archive</ulink></publishername>
      </publisher>
    </biblioentry>

    <biblioentry id="sun_code_conventions">
      <abbrev>Sun Code Conventions</abbrev>

      <title><ulink
      url="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">Code
      Conventions for the Java™ Programming Language</ulink></title>

      <publisher>
        <publishername>Sun Microsystems, Inc.</publishername>
      </publisher>
    </biblioentry>

    <biblioentry id="programming_style_guidelines">
      <abbrev>Java Programming Style Guidelines</abbrev>

      <title><ulink url="http://geosoft.no/javastyle.html">Java Programming
      Style Guidelines</ulink></title>

      <publisher>
        <publishername>Geotechnical Software Services</publishername>
      </publisher>
    </biblioentry>
  </bibliography>
</article>