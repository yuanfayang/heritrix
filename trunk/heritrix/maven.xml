<?xml version="1.0"?>
<project 
    default="dist"
    xmlns:j="jelly:core" 
    xmlns:u="jelly:util" 
    xmlns:maven="jelly:maven"
    xmlns:ant="jelly:ant">

    <preGoal name="xdoc:jelly-transform">
        <attainGoal name="faq"/>
    </preGoal> 

    <preGoal name="java:jar-resources"> 
        <filter token="VERSION" value="${pom.currentVersion}" /> 
    </preGoal> 

    <postGoal name="dist:prepare-bin-filesystem">
        <echo>[Heritrix] dist:prepare-bin-filesystem postGoal</echo>

        <!--Add the lib dir to our binary distribution.-->
        <copy todir="${maven.dist.bin.assembly.dir}/lib">
          <fileset dir="./lib">
            <include name="*.jar"/>
          </fileset>
        </copy>

        <!--Set filter token used in a few instances below.-->
        <filter token="VERSION" value="${pom.currentVersion}" />

        <!--Add the conf dir to our binary distribution.  Be careful w/
            filtering.  It ruins truststores so exclude those when during 
            filter copy.  Copy truststores separately afterward.
         -->
        <copy todir="${maven.dist.bin.assembly.dir}/conf" filtering="true">
          <fileset dir="./src/conf">
            <exclude name="*.cacerts"/>
          </fileset>
        </copy>
        <copy todir="${maven.dist.bin.assembly.dir}/conf">
          <fileset dir="./src/conf">
            <include name="*cacerts"/>
          </fileset>
        </copy>

        <!--Copy to a bin dir the heritrix start script.-->
        <copy todir="${maven.dist.bin.assembly.dir}/bin">
          <fileset dir="${maven.src.dir}/scripts">
            <include name="heritrix*"/>
          </fileset>
        </copy>

        <!--Set permission on scripts just copied.-->
        <!--The below succeeds changing the mode on the executables but 
            the subsequent dist:build-bin task ant tar'ring removes the
            execute bit.  Need to replace the dist:build-bin task w/ 
            a version that will preserve the execute bit on the script
            files (Putting the task in here whole doesn't work).-->
        <chmod perm="ugo+rx" >
          <fileset dir="${maven.dist.bin.assembly.dir}/bin">
            <include name="heritrix*"/>
          </fileset>
        </chmod>


        <!--Copy webapps to build directory w/ filtering enabled.
            Do the copy like this doing non-jpg first and then gif.
            Otherwise, ant breaks the jpgs because it interpolates.
         -->
        <copy todir="${maven.build.dir}/webapps" filtering="true">
          <fileset dir="${maven.src.dir}/webapps">
            <exclude name="**/*.gif"/>
          </fileset>
        </copy>
        <copy todir="${maven.build.dir}/webapps" filtering="false">
          <fileset dir="${maven.src.dir}/webapps">
            <include name="**/*.gif"/>
          </fileset>
        </copy>

        <!--Compile jsp pages into a jar.
            TODO: Make this conditional.
         -->
        <attainGoal name="jspc" />

        <!--Now create war files of what is in build directory.-->
        <property name="webapps.dir" value="${maven.build.dir}/webapps" />
        <war destfile="${maven.build.dir}/admin.war"
            webxml="${webapps.dir}/admin/WEB-INF/web.xml"
            basedir="${webapps.dir}/admin" />
        <war destfile="${maven.build.dir}/selftest.war"
            webxml="${webapps.dir}/selftest/WEB-INF/web.xml"
            basedir="${webapps.dir}/selftest" />
        <war destfile="${maven.build.dir}/root.war"
            webxml="${webapps.dir}/root/WEB-INF/web.xml"
            basedir="${webapps.dir}/root" />

        <!--Copy over the just made war files into the distribution copy.-->
        <copy todir="${maven.dist.bin.assembly.dir}/webapps">
          <fileset dir="${maven.build.dir}">
            <include name="*.war"/>
          </fileset>
        </copy>
    </postGoal>
    
    <postGoal name="dist:prepare-src-filesystem">
        <echo>[Heritrix] dist:prepare-src-filesystem postGoal</echo>
        <!--Add the lib dir to our binary distribution.-->
        <copy todir="${maven.dist.src.assembly.dir}/lib">
          <fileset dir="./lib">
            <include name="*.jar"/>
          </fileset>
        </copy>
    </postGoal>

    <goal name="testing" >
        <property name="webapp" value="XXXXXXXX" />
        <attainGoal name="makewebapp" />
    </goal>

    <goal name="jspc">
        <!--Compile down to servlets all in the ${webapp.name} webapp
            (Set this ant property before calling this goal).  Compile the 
            generated java classes.  Make a jar of them and install under
            the webapp/lib dir.  Add web.xml fragment that lists all servlets
            to the web.xml.
            
            Currently does admin webapp only.
         -->
        <property name="webapp.name" value="admin" />
        <echo>[jspc] Precompiling ${webapp.name} jsp pages.</echo>
        <property name="jspc" value="${maven.build.dir}/jspc/${webapp.name}" />
        <property name="jsp.jar" value="${jspc}/jsp.jar" />
        <property name="web.fragment" value="${jspc}/web-fragment.xml" />
        <property name="jspc.src" value="${jspc}/src" />
        <property name="jspc.classes" value="${jspc}/classes" />
        <property name="webapp.src.dir" value="${maven.src.dir}/webapps" />
        <property name="webinf"
            value="${maven.build.dir}/webapps/${webapp.name}/WEB-INF" />
        <!--Make a couple of dirs.-->
        <mkdir dir="${jspc.src}" />
        <mkdir dir="${jspc.classes}" />
        <!--Classpath to use in the believe.-->
        <path id="jspc.classpath">
            <path  refid="maven.dependency.classpath" />
            <pathelement path="${maven.build.dest}" />
        </path>
        <!--Run the compilation of the jsp pages. Note, jasper has its own
            included ant task but ant also comes w/ a jspc.  We use the ant
            one below.  The jasper one gave me grief trying to figure out
            exclude of 'include' dir.
         -->
        <jspc destdir="${jspc.src}" srcdir="${webapp.src.dir}/${webapp.name}"
            verbose="100" package="org.archive.crawler.jspc.${webapp.name}"
            webinc="${web.fragment}" classpathref="jspc.classpath"
            uriroot="${webapp.src.dir}/${webapp.name}" >
                <!--This include/exclude mechanism is really contrary.
                    The below seems to work properly though keeping the
                    include out of the fragments and out of the path of
                    our compiler; nothing under include is compilable
                    but its needed.
                 -->
                <exclude name="**/include/*.jsp"/>
        </jspc>
        <javac sourcepath="" srcdir="${jspc.src}" destdir="${jspc.classes}" 
            classpathref="jspc.classpath" />
        <loadfile srcFile="${web.fragment}" property="fragment"
            failonerror="true" />
        <replace file="${webinf}/web.xml"
            token="&lt;!--[INSERT JSP COMPILE SERVLET WEB FRAGMENT HERE]--&gt;"
            value="${fragment}" />
        <!--Jar up classes and copy into webapp/lib.-->
        <property name="webapp.lib" value="${webinf}/lib" />
        <jar destfile="${jsp.jar}" basedir="${jspc.classes}" />
        <mkdir dir="${webapp.lib}" />
        <copy todir="${webapp.lib}" file="${jsp.jar}" /> 
    </goal>

    <goal name="site:update-sourceforge">
        <!--This goal will update sourceforge crawler.archive.org site. Assumes
            maven.username has been defined in project.properties or in a 
            build.properties, and that that users public ssh key has been
            uploaded totheir sourceforge preferences (see
            http://sourceforge.net/docman/display_doc.php?docid=761&group_id=1)
            and that this key has no password associated (Means that 
            we get ssh CVS access w/o having to supply password).

            Note, this goal may give out a couple of lines like the below but
            these are harmless:
            
                [exec] failed to set permissions on . : Operation not permitted

            We use this new goal rather than 'site:sshdeploy' because we don't 
            want to totally overwrite the htdoc content up on sourceforge.
         -->
        <exec executable="rsync" >
            <arg value="--quiet" />
            <arg value="--archive" />
            <arg value="--rsh=ssh" />
            <arg
              value="${maven.build.dir}/docs/"/>
            <arg value="${maven.username}@crawler.archive.org:/home/groups/a/ar/archive-crawler/htdocs/" />
        </exec>
    </goal>
</project>
