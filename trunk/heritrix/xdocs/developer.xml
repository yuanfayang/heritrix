<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
    <properties>
        <title>Developer Manual</title>
        <author email="stack at archive dot org">St.Ack</author>
        <revision>$Id: developer.xml,v 1.5 2004/01/05 20:02:38 gojomo Exp 
            $</revision>
    </properties>
    <body>
        <section name="Developer Manual Introduction">
            <p>This doc. is for observers and contributors who'd like to pull 
                and build from source. In here we'll talk of cvs access, the 
                code layout, core technologies and patterns and their why, key 
                technical decisions and why.</p>
        </section>
        <section name="Obtaining Heritrix">
            <p>There three ways to obtain Heritrix: packaged binary or packaged 
                source download from the crawler <a 
                href="http://sourceforge.net/projects/archive-crawler">sourceforge 
                home page</a> or via CVS checkout. See the crawler <a 
                href="http://sourceforge.net/cvs/?group_id=73833">sourceforge 
                cvs page</a> for how to fetch from CVS (Note, anonymous access 
                does not give you the current HEAD but a snapshot that can at 
                times be up to 24 hours behind HEAD). The packaged binary will 
                be named <em>heritrix-?.?.?.tar.gz</em> (or 
                <em>heritrix-?.?.?.zip</em>) and the packaged source will be 
                named <em>heritrix-?.?.?-src.tar.gz</em> (or 
                <em>heritrix-?.?.?-src.zip</em>) where <em>?.?.?</em> is the 
                heritrix release version. </p>
        </section>
        <section name="Building Heritrix">
            <p>If you obtained packaged source, here is how you build w/ Ant: 
                <source> % tar xfz heritrix-?.?.?-src.tar.gz % cd 
                heritrix-?.?.? % $ANT_HOME/bin/ant dist </source> </p>
            <p>In the <em>dist</em> subdir will be all you need to run the 
                Heritrix crawler. To learn more about the ant build, type 
                <em>ant -projecthelp</em>. </p>
            <p>To build a CVS source checkout w/ Maven: <source> % cd 
                CVS_CHECKOUT_DIR % $MAVEN_HOME/bin/maven dist </source> </p>
            <p>In the <em>target/distribution</em> subdir, you will find 
                packaged source and binary builds. Run 
                <em>$MAVEN_HOME/bin/maven -g</em> for other Maven 
                possibilities. </p>
        </section>
        <section name="Eclipse">
            <p>At the head of the CVS tree, you'll find Eclipse 
                <em>.project</em> and <em>.classpath</em> configuration files 
                that should make integrating the CVS checkout into your Eclipse 
                development environment straight-forward. </p>
        </section>
        <section name="Unit Tests Code">
            <p>"[A] popular convention is to place all test classes in a 
                parallel directory structure. This allows you to use the same 
                Java package names for your tests, while keeping the source 
                files separate. To be honest, we do not like this approach 
                because you must look in two different directories to find 
                files." from <em>Section 4.11.3, Java Extreme Programming 
                Cookbook, By Eric M. Burke, Brian M. Coyner</em>. We agree w/ 
                the above so we put Unit Test classes beside the classes they 
                are testing in the source tree giving them the name of the 
                Class they are testing w/ a Test suffix. </p>
        </section>
        <section name="Coding Conventions">
            <p>Heritrix baselines on SUN's <a 
                href="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">Code 
                Conventions for the JavaTM Programming Language</a>. It'd be 
                hard not to they say so little. They at least say <a 
                href="http://java.sun.com/docs/codeconv/html/CodeConventions.doc3.html#313">maximum 
                line length of 80 characters</a>. Below are tightenings on the 
                SUN conventions used in Heritrix. </p>
            <p>We also will favor much of what is written in this document, <a 
                href="http://geosoft.no/javastyle.html">Java Programming Style 
                Guidelines</a>.</p>
            <subsection name="No Tabs">
                <p>No tabs in source code. Set your editor to indent w/ 
                    spaces.</p>
            </subsection>
            <subsection name="Indent Width">
                <p>Indents are 4 charcters wide.</p>
            </subsection>
        </section>
        <section name="Version and Release Numbering">
            <p>Heritrix uses a version numbering scheme modelled after the one 
                used for Linux kernels. Versions are 3 numbers: </p>
            <p>[major].[minor/mode].[patchlevel] </p>
            <p>The major version number, currently at zero, increments upon 
                significant architectural changes or the achievement of 
                important milestones in capabilities. The minor/mode version 
                number increments as progress is made within a major version, 
                with the added constraint that all external releases have an 
                even minor/mode version number, and all internal/development 
                versions have an odd minor/mode version number. </p>
            <p>The patchlevel number increments for small sets of changes, 
                providing the most fine-grain timeline of software evolution. 
                Patchlevels increment regularly for internal/development(odd 
                minor level) work, but only increment for external releases 
                when an official update to the previous release version has 
                been tested and packaged. </p>
            <p>In the CVS HEAD, version numbers are applied as tags of the form 
                "heritrix-#_#_#". When a particular development-version is 
                thought appropriate to become an external/"stable" release, it 
                is considered a "Release Candidate". If testing confirms it is 
                suitable for release, it is assigned the next even minor/mode 
                value (and a zero patchlevel), CVS version-labelled, and 
                packaged for release. Immediately after release, and before 
                additional coding occurs, the CVS HEAD is assigned the next odd 
                minor/mode value (and a zero patchlevel) in project/source 
                files. </p>
            <p>If patches are required to a released version, before the next 
                release is ready, they are applied to a CVS branch from the 
                release version tag, tested, and released as the subsequent 
                patchlevel. </p>
            <p>Keep in mind that each version number is an integer, not merely 
                a decimal digit. To use an extreme example: development version 
                2.99.99 would be followed by either the 2.99.100 development 
                version patchlevel or the 2.100.0 release. (And after such a 
                release, the next development version would be 2.101.0.) </p>
        </section>
        <section name="cruisecontrol">
            <p>See <a 
                href="http://cvs.sourceforge.net/viewcvs.py/archive-crawler/ArchiveOpenCrawler/src/cc">src/cc</a> 
                for a <em>config.xml</em> that will run the heritrix maven 
                build under <a 
                href="http://cruisecontrol.sourceforge.net/">cruisecontrol</a> 
                (See the README.txt in the same directory for how to set up 
                continuous building using cc). </p>
        </section>
    </body>
</document>