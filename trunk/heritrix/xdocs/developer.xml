<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
    <properties>
        <title>Developer Manual</title>
        <author email="stack at archive dot org">St.Ack</author>
        <revision>$Id: developer.xml,v 1.5 2004/01/05 20:02:38 gojomo Exp 
            $</revision>
    </properties>
    <body>
        <section name="Developer Manual Introduction">
            <p>This section is for observers and contributors who'd like to
                build from source. In here we'll talk of cvs access, the 
                code layout, core technologies and key technical decisions.</p>
        </section>
        <section name="Obtaining Heritrix">
            <p>There are three ways to obtain Heritrix: packaged binary or
            packaged source downloaded from the crawler <a 
            href="http://sourceforge.net/projects/archive-crawler">sourceforge 
                home page</a> or via CVS checkout. See the crawler <a 
                href="http://sourceforge.net/cvs/?group_id=73833">sourceforge 
                cvs page</a> for how to fetch from CVS (Note, anonymous access 
                does not give you the current HEAD but a snapshot that can
                some times be up to 24 hours behind HEAD). The packaged binary
                is named <em>heritrix-?.?.?.tar.gz</em> (or 
                <em>heritrix-?.?.?.zip</em>) and the packaged source is
                named <em>heritrix-?.?.?-src.tar.gz</em> (or 
                <em>heritrix-?.?.?-src.zip</em>) where <em>?.?.?</em> is the 
                heritrix release version. </p>
        </section>
        <section name="Building Heritrix">
            <p>You can build Heritrix from source using Ant or Maven. The Maven 
                build is more comprehensive and will generate everything from
                either 
                the packaged source or from a CVS checkout. The Ant build is 
                less so in that it doesn't generate the distribution 
                documentation but it does produce everything else needed to run 
                Heritrix.</p>

                <p>If you are building Heritrix with Ant, you must have Ant 1.5 
                    installed.  Make sure the Ant optional.jar file 
                    sits beside the junit.jar. See <a 
                    href="http://ant.apache.org/manual/OptionalTasks/junit.html">JUnit 
                    Task</a> for what you must do to set up Ant to run junit 
                    tests (The build requires junit).</p>
                    <p>The Heritrix maven build was developed using 
                    1.0-rc1. See maven.apache.org. </p>

	<subsection name="Building Heritrix with Ant">
	    <p>If you obtained the packaged source, here is how you build with Ant: 
<source>% tar xfz heritrix-?.?.?-src.tar.gz 
% cd heritrix-?.?.? % $ANT_HOME/bin/ant dist </source> </p>
            <p>In the <em>dist</em> subdir, you have all you need to run the 
                Heritrix crawler. To learn more about the ant build, type 
                <em>ant -projecthelp</em>. </p>
	</subsection>
            
            <subsection name="Building Heritrix with Maven">
            <p>To build a CVS source checkout with Maven:
<source>% cd CVS_CHECKOUT_DIR 
% $MAVEN_HOME/bin/maven dist</source> </p>
            <p>In the <em>target/distribution</em> subdir, you will find 
                packaged source and binary builds. Run 
                <em>$MAVEN_HOME/bin/maven -g</em> for other Maven 
                possibilities.</p>
                </subsection>
        </section>
        <section name="Running Heritrix">
            <p>See the <a href="user.html">User Manual</a> for how to run 
                the built Heritrix.</p>
        </section>
        <section name="Eclipse">
            <p>At the head of the CVS tree, you'll find Eclipse 
                <em>.project</em> and <em>.classpath</em> configuration files 
                that should make integrating the CVS checkout into your Eclipse 
                development environment straight-forward. </p>
        </section>
        <section name="Unit Tests Code">
            <p>"[A] popular convention is to place all test classes in a 
                parallel directory structure. This allows you to use the same 
                Java package names for your tests, while keeping the source 
                files separate. To be honest, we do not like this approach 
                because you must look in two different directories to find 
                files." from <em>Section 4.11.3, Java Extreme Programming 
                Cookbook, By Eric M. Burke, Brian M. Coyner</em>. We agree with 
                the above so we put Unit Test classes beside the classes they 
                are testing in the source tree giving them the name of the 
                Class they are testing with a Test suffix. </p>
        </section>
        <section name="Coding Conventions">
            <p>Heritrix baselines on SUN's <a 
                href="http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html">Code 
                Conventions for the JavaTM Programming Language</a>. It'd be 
                hard not to they say so little. They at least say <a 
                href="http://java.sun.com/docs/codeconv/html/CodeConventions.doc3.html#313">maximum 
                line length of 80 characters</a>. Below are tightenings on the 
                SUN conventions used in Heritrix. </p>

            <p>We also will favor much of what is written in this document, <a 
                href="http://geosoft.no/javastyle.html">Java Programming Style 
                Guidelines</a>.</p>

            <subsection name="No Tabs">
                <p>No tabs in source code. Set your editor to indent with 
                    spaces.</p>
            </subsection>

            <subsection name="Indent Width">
                <p>Indents are 4 charcters wide.</p>
            </subsection>

            <subsection name="Function/Block Bracket Open on Same Line">
                <p>Preference is to have the bracket that opens functions
                and blocks on same line as function declaration or 
                block test rather than on a new line on of its ownsome.  
                For example:<source>if (true) {
    return true;
}
                    </source>
                    and
                    <source>public void main (String [] args) {
    System.println("Hello world");
}</source>
                    </p>
            </subsection>

            <subsection name="File comment">
                <p>Here is the eclipse
                    template we use for the file header comment:
                <source>/* ${type_name}
 * 
 * $$Id$$
 * 
 * Created on ${date}
 *
 * Copyright (C) ${year} Internet Archive.
 * 
 * This file is part of the Heritrix web crawler (crawler.archive.org).
 * 
 * Heritrix is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * any later version.
 * 
 * Heritrix is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser Public License
 * along with Heritrix; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
${package_declaration}</source></p>
            </subsection>
        </section>
        <section name="Version and Release Numbering" id="version">
            <p>Heritrix uses a version numbering scheme modelled after the one 
                used for Linux kernels. Versions are 3 numbers: </p>
            <p>[major].[minor/mode].[patchlevel] </p>
            <p>The major version number, currently at zero, increments upon 
                significant architectural changes or the achievement of 
                important milestones in capabilities. The minor/mode version 
                number increments as progress is made within a major version, 
                with the added constraint that all external releases have an 
                even minor/mode version number, and all internal/development 
                versions have an odd minor/mode version number. </p>
            <p>The patchlevel number increments for small sets of changes, 
                providing the most fine-grain timeline of software evolution. 
                Patchlevels increment regularly for internal/development(odd 
                minor level) work, but only increment for external releases 
                when an official update to the previous release version has 
                been tested and packaged. </p>
            <p>In the CVS HEAD, version numbers are applied as tags of the form 
                "heritrix-#_#_#". When a particular development-version is 
                thought appropriate to become an external/"stable" release, it 
                is considered a "Release Candidate". If testing confirms it is 
                suitable for release, it is assigned the next even minor/mode 
                value (and a zero patchlevel), CVS version-labelled, and 
                packaged for release. Immediately after release, and before 
                additional coding occurs, the CVS HEAD is assigned the next odd 
                minor/mode value (and a zero patchlevel) in project/source 
                files. </p>
            <p>If patches are required to a released version, before the next 
                release is ready, they are applied to a CVS branch from the 
                release version tag, tested, and released as the subsequent 
                patchlevel. </p>
            <p>Keep in mind that each version number is an integer, not merely 
                a decimal digit. To use an extreme example: development version 
                2.99.99 would be followed by either the 2.99.100 development 
                version patchlevel or the 2.100.0 release. (And after such a 
                release, the next development version would be 2.101.0.) </p>
        </section>

        <section name="Making a Heritrix Release" id="release">
            <p>Before initiating a release, its assumed that the current HEAD 
                version has been run through the integration self test, 
                that all unit tests pass, that the (as yet non-existent) test 
                suite has been exercised, and that general usage
                shows HEAD to be release worthy.</p>
            <ol>
                <li>Send a mail to the list to freeze commits until the 
                    all-clear is given.</li>
                <li>Up the <em>project.xml</em> 'currentVersion' element and 
                    the <em>build.xml</em> 'version' property. Ensure they are 
                    the same version number. (See <em>Version and Release 
                    Numbering</em> on this page for guidance on what version 
                    number to use)</li>
                <li>Update <em>xdocs/changes.xml</em> with bugs and RFEs 
                closed since last release.
                </li>
                <li>(TODO: Changelog based off CVS history).</li>
                <li>Add news of the new release to the site main home page.</li>
                <li>Generate the site.  Review all documentation making
                sure it remains applicable. Fix at least the 
                embarrassing.  Make issues to have all that remains
                addressed.</li>
                <li>Update the README.txt.  Do html2txt on maven generated
                xdocs (I did 'cat PAGE.html| w3m -dump -T text/html > PAGE.txt',
                catted the product together and then did vi regex'ing to 
                clean out website navigations and extra whitespace).</li>
                <li>Commit all changes made above all in the one commit with
                a log message about new release.  Commit files with the 
                new version -- the build.xml and project.xml -- as well 
                as the README.txt, home page, and all changes in documentation
                including the changelog additions.<li>
                <li>Wait on a cruisecontrol successful build of all just 
                committed.  Download the src and binary latest builds from 
                under the cruisecontrol 'build artifacts' link.</li>

                <li>Build the cruisecontrol produced src distribution version
                    using both maven and ant to ensure both builds work.</li>
                <li>Run both the binary and src-built product through the
                    integration self test
                    suite: % $HERITRIX_HOME/bin/heritrix --selftest</li>
                <li>Tag the CVS repository: % cvs -q tag heritrix-?_?_?</li>
                <li>Update the <em>project.xml</em>'currentVersion' and 
                    <em>build.xml</em> 'version' property to both be a version 
                    number beyond that of the release currently being made (If 
                    we're releasing 0.2.0, then increment to 0.3.0).</li>
                <li>Login and upload the maven 'dist' product to sourceforge 
                    into the admin->File releases section. </li>
                <li>Send announcement to mailinglist 
                    -- and give an all-clear that commits may resume -- and 
                    update our release state on freshmeat site (Here is the URL 
                    I used creating our freshmeat project: 
                    http://freshmeat.net/add-project/all-done/43820/46804/ -- 
                    46804 is our project ID).</li>
            </ol>
        </section>

        <section name="Integration self test">
            <p>Run the integration self test on the command line by doing the
            following:
            <source>% $HERITRIX_HOME/bin/heritrix --selftest</source>
            </p>
            <p>This will set the crawler going against itself, in particular,
            the <i>selftest</i> webapp.  When done, it runs an analsys of 
            the produced arc files and logs and dumps a ruling into 
            <i>heritrix_out.log</i>.  See the 
            <i>org.archive.crawler.selftest</i> package for more on how the
            selftest works.</p>
        </section>
                        
                            
                                
      <section name="cruisecontrol"> <p>See <a 
                    href="http://cvs.sourceforge.net/viewcvs.py/archive-crawler/ArchiveOpenCrawler/src/cc">src/cc</a> 
                    for a <em>config.xml</em> that will run the heritrix maven 
                    build under <a 
                    href="http://cruisecontrol.sourceforge.net/">cruisecontrol</a>. 
                    See the README.txt in the same directory for how to set up 
                    continuous building using cc.</p> </section> 
                    
                    
<section name="Settings XML Schema">
    <p>The XML Schema that describes the crawler job order file can be viewed
    as xhtml here,
    <a href="http://cvs.sourceforge.net/viewcvs.py/archive-crawler/ArchiveOpenCrawler/src/webapps/root/heritrix_settings.html?rev=1">heritrix_settings.html</a>.
    </p>
</section>
                    </body> 
                    </document>
